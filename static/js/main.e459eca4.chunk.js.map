{"version":3,"sources":["store/hooks.ts","utils/axiosClient.ts","features/Posts/postsSlice.ts","api/post.ts","pages/NotFound.tsx","pages/HomePage/HomePage.tsx","pages/PostPage/PostPage.tsx","api/users.ts","App.tsx","store/index.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","baseURL","instance","axios","create","client","url","get","response","console","log","data","initialState","storage","statusLoading","error","getPostsAsync","createAsyncThunk","a","postsSlice","createSlice","name","reducers","addPosts","state","action","push","payload","setStatus","setError","resetState","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectPosts","posts","NotFound","HomePage","className","style","listStyle","textAlign","map","post","to","id","display","textDecoration","color","border","borderRadius","margin","padding","boxSizing","title","body","PostPage","useParams","dispatch","find","p","String","getAllUsers","App","users","useLoaderData","useEffect","length","user","router","createHashRouter","path","element","errorElement","loader","children","rootReducer","combineReducers","postsReducer","persistConfig","key","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","createRoot","document","getElementById","render","loading"],"mappings":"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","file":"static/js/main.e459eca4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '.';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from 'axios';\n\nconst baseURL = 'https://jsonplaceholder.typicode.com';\n\nconst instance = axios.create({\n  baseURL,\n});\n\ntype FetchData = {\n};\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    // eslint-disable-next-line no-console\n    console.log('get', baseURL + url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: FetchData) {\n    const response = await instance.post<T>(url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: FetchData) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getAllPosts } from '../../api/post';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../store';\nimport { Post } from '../../type/Post';\n\nexport interface PostsState {\n  storage: Post[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: PostsState = {\n  storage: [],\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getPostsAsync = createAsyncThunk('posts/fetchPosts', async () => {\n  const response: Post[] = await getAllPosts();\n\n  // eslint-disable-next-line no-console\n  console.log(response);\n\n  return response;\n});\n\nconst postsSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {\n    addPosts: (state: PostsState, action: PayloadAction<Post[]>) => {\n      state.storage.push(...action.payload);\n    },\n    setStatus: (\n      state: PostsState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setError: (state: PostsState, action: PayloadAction<unknown>) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetState: (state: PostsState) => {\n      return { ...state, ...initialState };\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPostsAsync.pending, (state: PostsState) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(getPostsAsync.fulfilled, (state, action) => {\n        state.storage.push(...action.payload);\n        state.statusLoading = 'idle';\n      })\n      .addCase(getPostsAsync.rejected, (state, action) => {\n        state.statusLoading = 'failed';\n\n        // eslint-disable-next-line no-console\n        console.log(action);\n      });\n  },\n});\n\nexport default postsSlice.reducer;\nexport const {\n  addPosts,\n  setStatus,\n  setError,\n  resetState,\n} = postsSlice.actions;\n\nexport const selectPosts = (state: RootState) => state.posts.storage;\nexport const selectPostStatusLoading\n= (state: RootState) => state.posts.statusLoading;\nexport const selectPostError = (state: RootState) => state.posts.error;\n","import { client } from '../utils/axiosClient';\nimport { Post } from '../type/Post';\n\nexport const getAllPosts = () => client.get<Post[]>('/posts/');\nexport const getPostById = (postId: number) => client.get<Post[]>(`/posts/${postId}`);\n","import { FunctionComponent } from 'react';\n\nexport const NotFound: FunctionComponent = () => {\n  return (\n    <div>\n      This page doesn&nbsp;t exist.\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAppSelector } from '../../store/hooks';\nimport { selectPosts } from '../../features/Posts/postsSlice';\n\nimport './HomePage.scss';\n\nexport const HomePage: FunctionComponent = () => {\n  const posts = useAppSelector(selectPosts);\n\n  return (\n    <div className=\"HomePage\">\n      <h1>HomePage</h1>\n      <ul style={{\n        listStyle: 'none',\n        textAlign: 'left',\n      }}\n      >\n        {posts.map(post => (\n          <li key={post.id}>\n            <Link\n              to={`post/${post.id}`}\n              style={{\n                display: 'block',\n                textDecoration: 'none',\n                color: 'grey',\n                border: '1px solid grey',\n                borderRadius: '10px',\n                margin: '1rem',\n                padding: '1rem',\n                boxSizing: 'border-box',\n              }}\n            >\n              {`${post.id}. ${post.title}: ${post.body}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { resetState, selectPosts } from '../../features/Posts/postsSlice';\n\nimport './PostPage.scss';\n\nexport const PostPage: FunctionComponent = () => {\n  const { id } = useParams();\n\n  // eslint-disable-next-line no-console\n  console.log(id);\n\n  const posts = useAppSelector(selectPosts);\n  const dispatch = useAppDispatch();\n\n  dispatch(resetState());\n\n  const post = posts.find(p => String(p.id) === String(id));\n\n  return (\n    <div\n      className=\"PostPage\"\n    >\n      <Link\n        to=\"/\"\n        className=\"PostPage__Link\"\n      >\n        Back\n      </Link>\n\n      {post ? (\n        <div>\n          <h1>{`PostPage: ${post.title}`}</h1>\n          <p>{post.body}</p>\n        </div>\n      ) : (\n        <>\n          post doesn&nbsp;t exist\n        </>\n      )}\n    </div>\n  );\n};\n","import { client } from '../utils/axiosClient';\nimport { User } from '../type/User';\n\nexport const getAllUsers = () => client.get<User[]>('/users');\nexport const getUserById = (userId: number) => client.get<User[]>(`/users/${userId}`);\n","import { useEffect } from 'react';\nimport { createHashRouter, Outlet, useLoaderData } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { getPostsAsync, selectPosts } from './features/Posts/postsSlice';\nimport { NotFound } from './pages/NotFound';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { PostPage } from './pages/PostPage/PostPage';\nimport { getAllUsers } from './api/users';\nimport './App.scss';\nimport { User } from './type/User';\n\nexport async function rootLoader() {\n  const response = await getAllUsers();\n\n  return response;\n}\n\nfunction App() {\n  const users = useLoaderData() as User[];\n  const posts = useAppSelector(selectPosts);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (posts.length === 0) {\n      dispatch(getPostsAsync());\n    }\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__Header\">\n        <h1>React Template</h1>\n        {users.length\n          && users.map((user: User) => <p key={user.id}>{user.name}</p>)}\n      </header>\n\n      <main className=\"App__Container\">\n        <Outlet />\n      </main>\n    </div>\n  );\n}\n\nexport const router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    errorElement: <NotFound />,\n    loader: rootLoader,\n    id: 'root',\n    children: [\n      {\n        path: '/',\n        element: <HomePage />,\n        id: 'homepage',\n        errorElement: <>Error on Homepage</>,\n      },\n      {\n        path: '/post/:id',\n        element: <PostPage />,\n        errorElement: <>Error on Homepage</>,\n      },\n    ],\n  },\n]);\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// eslint-disable-next-line import/no-cycle\nimport postsReducer from '../features/Posts/postsSlice';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['posts'],\n  // blacklist: ['posts'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\n        FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER,\n        'posts',\n      ],\n    },\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { RouterProvider } from 'react-router-dom';\nimport { router } from './App';\nimport store, { persistor } from './store';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <RouterProvider router={router} />\n    </PersistGate>\n  </Provider>,\n);\n"],"sourceRoot":""}