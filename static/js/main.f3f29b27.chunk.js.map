{"version":3,"sources":["pages/NotFound.tsx","pages/HomePage/HomePage.tsx","store/hooks.ts","utils/axiosClient.ts","store/features/Posts/postsSlice.ts","api/post.ts","pages/PostPage/PostPage.tsx","App.tsx","store/features/Interval/intervalSlice.ts","store/index.ts","index.tsx"],"names":["NotFound","HomePage","className","dateFunction","y","Date","getFullYear","m","getMonth","d","getDate","console","log","date","getDay","startCurrentWeek","endCurrentWeek","lastMondayBeforeMonth","theEndOfFirstSundayAfterMonth","startYear","endOfYear","start","end","interval","current","today","push","todos","buildInterval","useAppDispatch","useDispatch","useAppSelector","useSelector","baseURL","instance","axios","create","client","url","get","response","data","initialState","storage","statusLoading","error","getPostsAsync","createAsyncThunk","a","postsSlice","createSlice","name","reducers","addPosts","state","action","payload","setStatus","setError","resetState","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectPosts","posts","PostPage","id","useParams","dispatch","post","find","p","String","to","title","body","App","router","createHashRouter","path","element","errorElement","children","currentDate","format","intervalSlice","addTodo","setFormat","rootReducer","combineReducers","postsReducer","persistConfig","key","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","createRoot","document","getElementById","render","loading"],"mappings":"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","file":"static/js/main.f3f29b27.chunk.js","sourcesContent":["import { FunctionComponent } from 'react';\n\nexport const NotFound: FunctionComponent = () => {\n  return (\n    <div>\n      This page doesn&nbsp;t exist.\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\n\nimport './HomePage.scss';\n\nexport const HomePage: FunctionComponent = () => {\n  return (\n    <div className=\"HomePage\">\n      <h2>HomePage</h2>\n\n    </div>\n  );\n};\n\n// function Calendar(isWeekStartsFromMonday: boolean) {\n//   this.isWeekStartsFromMonday = isWeekStartsFromMonday;\n\n//   // return {\n//   //   isWeekStartsFromMonday,\n\n//   //   setIsWeekStartsFromMonday: (value: boolean) => {\n//   //     return { isWeekStartsFromMonday: value };\n//   //   },\n\n//   //   getStartDay: () => {},\n//   //   getEndDay: () => {},\n//   // };\n// }\n\n// const calendar = new Calendar(true);\n\n// eslint-disable-next-line no-console\n// console.log('calendar() = ', calendar);\n\nconst isWeekStartsFromMonday = true;\n// const isWeekStartsFromMonday = false;\nconst EU = () => (isWeekStartsFromMonday ? 1 : 0);\n\nexport const dateFunction = (\n  y = new Date().getFullYear(),\n  m = new Date().getMonth(),\n  d = new Date().getDate(),\n) => new Date(y, m, d);\n\n// eslint-disable-next-line no-console\nconsole.log('dateFunction()', dateFunction());\n\nconst date = dateFunction();\n\n// eslint-disable-next-line no-console\nconsole.log('date = ', date);\n// eslint-disable-next-line no-console\nconsole.log('date.getDate() = ', date.getDate());\n// eslint-disable-next-line no-console\nconsole.log('date.getDay() = ', date.getDay());\n\nconst startCurrentWeek = new Date(\n  date.getFullYear(),\n  date.getMonth(),\n  date.getDate() - date.getDay() + EU(),\n);\n\n// eslint-disable-next-line no-console\nconsole.log('startCurrentWeek ', startCurrentWeek);\n\nconst endCurrentWeek = new Date(\n  date.getFullYear(),\n  date.getMonth(),\n  date.getDate() - date.getDay() + EU() + 7,\n);\n\n// eslint-disable-next-line no-console\nconsole.log('endCurentweek = ', endCurrentWeek);\n\nconst lastMondayBeforeMonth = new Date(\n  date.getFullYear(),\n  date.getMonth(),\n  EU() - (new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    0,\n  )).getDay(),\n);\n\n// eslint-disable-next-line no-console\nconsole.log('lastMondayBeforeMonth ', lastMondayBeforeMonth);\n\nconst theEndOfFirstSundayAfterMonth = new Date(\n  date.getFullYear(),\n  date.getMonth() + 1,\n  EU() - (new Date(\n    date.getFullYear(),\n    date.getMonth() + 1,\n    0,\n  )).getDay(),\n);\n\n// eslint-disable-next-line no-console\nconsole.log('firstSundayAfterMonth = ', theEndOfFirstSundayAfterMonth);\n\nconst startYear = new Date(\n  date.getFullYear(),\n  0,\n  1,\n);\n\n// eslint-disable-next-line no-console\nconsole.log('startYear', startYear);\n\nconst endOfYear = new Date(\n  date.getFullYear() + 1,\n  0,\n  1,\n);\n\n// eslint-disable-next-line no-console\nconsole.log('endOfYear = ', endOfYear);\n//------------------------------------------------------\nexport function buildWeek() {\n  const week = [];\n  let current = new Date(\n    startCurrentWeek.getFullYear(),\n    startCurrentWeek.getMonth(),\n    startCurrentWeek.getDate(),\n  );\n\n  // week.push({ date: current, todos: []});\n  let today = startCurrentWeek.getDate();\n\n  while (current < endCurrentWeek) {\n    week.push({\n      date: current,\n      todos: [], // function load todos per day\n    });\n\n    // eslint-disable-next-line no-plusplus\n    today++;\n    current = new Date(\n      startCurrentWeek.getFullYear(),\n      startCurrentWeek.getMonth(),\n      today,\n    );\n  }\n\n  return week;\n}\n\n// console.log(buildWeek());\n\nexport function buildInterval(start: Date, end: Date) {\n  const interval = [];\n  let current = new Date(\n    start.getFullYear(),\n    start.getMonth(),\n    start.getDate(),\n  );\n\n  // week.push({ date: current, todos: []});\n  let today = start.getDate();\n\n  while (current < end) {\n    interval.push({\n      date: current,\n      todos: [], // function load todos per day\n    });\n\n    // eslint-disable-next-line no-plusplus\n    today++;\n    current = new Date(\n      start.getFullYear(),\n      start.getMonth(),\n      today,\n    );\n  }\n\n  return interval;\n}\n\n// eslint-disable-next-line no-console\nconsole.log(\n  buildInterval(lastMondayBeforeMonth, theEndOfFirstSundayAfterMonth),\n);\n\n// function buildMonth() {\n//   const month = [];\n//   const current = lastMondayBeforeMonth;\n\n//   while (current < theEndOfFirstSundayAfterMonth) {\n//     month.push({\n//       date: new Date(\n//         startCurrentWeek.getFullYear(),\n//         startCurrentWeek.getMonth(),\n//         startCurrentWeek.getDate() + i),\n//       todos: [], // function load todos per day\n//     });\n//   }\n\n//   return month;\n// }\nconst i = 6;\n\n// eslint-disable-next-line no-console\nconsole.log('startCurrentWeek', startCurrentWeek);\n\n// eslint-disable-next-line no-console\nconsole.log(new Date(\n  startCurrentWeek.getFullYear(),\n  startCurrentWeek.getMonth(),\n  startCurrentWeek.getDate() + i,\n));\n\n// eslint-disable-next-line no-console\nconsole.log(new Date(\n  startCurrentWeek.getFullYear(),\n  startCurrentWeek.getMonth(),\n  startCurrentWeek.getDate() + i,\n) < endCurrentWeek);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '.';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from 'axios';\n\nconst baseURL = 'https://jsonplaceholder.typicode.com';\n\nconst instance = axios.create({\n  baseURL,\n});\n\ntype FetchData = {\n};\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    // eslint-disable-next-line no-console\n    console.log('get', baseURL + url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: FetchData) {\n    const response = await instance.post<T>(url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: FetchData) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { getAllPosts } from '../../../api/post';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../..';\nimport { Post } from '../../../type/Post';\n\nexport interface PostsState {\n  storage: Post[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: PostsState = {\n  storage: [],\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getPostsAsync = createAsyncThunk('posts/fetchPosts', async () => {\n  const response: Post[] = await getAllPosts();\n\n  // eslint-disable-next-line no-console\n  console.log(response);\n\n  return response;\n});\n\nconst postsSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {\n    addPosts: (state: PostsState, action: PayloadAction<Post[]>) => {\n      state.storage.push(...action.payload);\n    },\n    setStatus: (\n      state: PostsState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setError: (state: PostsState, action: PayloadAction<unknown>) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetState: (state: PostsState) => {\n      return { ...state, ...initialState };\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPostsAsync.pending, (state: PostsState) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(getPostsAsync.fulfilled, (state, action) => {\n        state.storage.push(...action.payload);\n        state.statusLoading = 'idle';\n      })\n      .addCase(getPostsAsync.rejected, (state, action) => {\n        state.statusLoading = 'failed';\n\n        // eslint-disable-next-line no-console\n        console.log(action);\n      });\n  },\n});\n\nexport default postsSlice.reducer;\nexport const {\n  addPosts,\n  setStatus,\n  setError,\n  resetState,\n} = postsSlice.actions;\n\nexport const selectPosts = (state: RootState) => state.posts.storage;\nexport const selectPostStatusLoading\n= (state: RootState) => state.posts.statusLoading;\nexport const selectPostError = (state: RootState) => state.posts.error;\n","import { client } from '../utils/axiosClient';\nimport { Post } from '../type/Post';\n\nexport const getAllPosts = () => client.get<Post[]>('/posts/');\nexport const getPostById = (postId: number) => client.get<Post[]>(`/posts/${postId}`);\n","import { FunctionComponent } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { resetState, selectPosts } from '../../store/features/Posts/postsSlice';\n\nimport './PostPage.scss';\n\nexport const PostPage: FunctionComponent = () => {\n  const { id } = useParams();\n\n  // eslint-disable-next-line no-console\n  console.log(id);\n\n  const posts = useAppSelector(selectPosts);\n  const dispatch = useAppDispatch();\n\n  dispatch(resetState());\n\n  const post = posts.find(p => String(p.id) === String(id));\n\n  return (\n    <div\n      className=\"PostPage\"\n    >\n      <Link\n        to=\"/\"\n        className=\"PostPage__Link\"\n      >\n        Back\n      </Link>\n\n      {post ? (\n        <div>\n          <h1>{`PostPage: ${post.title}`}</h1>\n          <p>{post.body}</p>\n        </div>\n      ) : (\n        <>\n          post doesn&nbsp;t exist\n        </>\n      )}\n    </div>\n  );\n};\n","import { createHashRouter, Outlet } from 'react-router-dom';\nimport { NotFound } from './pages/NotFound';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { PostPage } from './pages/PostPage/PostPage';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App__Header\">\n        <h1>Calendar</h1>\n      </header>\n\n      <main className=\"App__Container\">\n        <Outlet />\n      </main>\n    </div>\n  );\n}\n\nexport const router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    errorElement: <NotFound />,\n    id: 'root',\n    children: [\n      {\n        path: '/',\n        element: <HomePage />,\n        id: 'homepage',\n        errorElement: <>Error on Homepage</>,\n      },\n      {\n        path: '/post/:id',\n        element: <PostPage />,\n        errorElement: <>Error on PostPage</>,\n      },\n    ],\n  },\n]);\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../..';\n\nexport type Todo = {\n  todoId: string;\n  createdAt: Date;\n  changeAt: Date;\n  title: string;\n};\nexport type Interval = 'day' | 'week' | 'month' | 'year';\n\nexport interface IntervalState {\n  currentDate: Date | null;\n\n  storage: Todo[];\n  format: Interval\n}\n\nconst initialState: IntervalState = {\n  currentDate: null,\n\n  storage: [],\n  format: 'week',\n};\n\nexport const getIntervalAsync = createAsyncThunk(\n  'Interval/fetchInterval',\n  async () => {\n    // const response: Post[] = await getAllInterval();\n\n    // eslint-disable-next-line no-console\n    // console.log(response);\n\n    // return response;\n  },\n);\n\nconst intervalSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {\n    addTodo: (state: IntervalState, action: PayloadAction<Todo>) => {\n      state.storage.push(action.payload);\n    },\n    setFormat: (\n      state: IntervalState,\n      action: PayloadAction<Interval>,\n    ) => {\n      state.format = action.payload;\n    },\n    resetState: (state: IntervalState) => {\n      return { ...state, ...initialState };\n    },\n  },\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(getIntervalAsync.pending, (state: IntervalState) => {\n  //       state.statusLoading = 'loading';\n  //     })\n  //     .addCase(getIntervalAsync.fulfilled, (state, action) => {\n  //       state.storage.push(...action.payload);\n  //       state.statusLoading = 'idle';\n  //     })\n  //     .addCase(getIntervalAsync.rejected, (state, action) => {\n  //       state.statusLoading = 'failed';\n\n  //       // eslint-disable-next-line no-console\n  //       console.log(action);\n  //     });\n  // },\n});\n\nexport default intervalSlice.reducer;\nexport const {\n  addTodo,\n  resetState,\n} = intervalSlice.actions;\n\nexport const selectInterval = (state: RootState) => state.interval.storage;\nexport const selectIntervalFormat\n= (state: RootState) => state.interval.format;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// eslint-disable-next-line import/no-cycle\nimport postsReducer from './features/Posts/postsSlice';\n// eslint-disable-next-line import/no-cycle\nimport intervalSlice from './features/Interval/intervalSlice';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  interval: intervalSlice,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['posts'],\n  // blacklist: ['posts'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\n        FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER,\n        'posts',\n      ],\n    },\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { RouterProvider } from 'react-router-dom';\nimport { router } from './App';\nimport store, { persistor } from './store';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <RouterProvider router={router} />\n    </PersistGate>\n  </Provider>,\n);\n"],"sourceRoot":""}